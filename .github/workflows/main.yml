name: Terraform CI/CD Pipeline
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read
  pull-requests: write
  issues: write
  statuses: write
  checks: write
  actions: write
  deployments: write

env:
  BRANCH_NAME: ${{ github.ref_name }}
  GITHUB_ACTOR: ${{ github.actor }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  SLACK_CHANNEL: ${{ github.ref_name == 'main' && '#production-alerts' || '#dev-alerts' }}
  TF_VAR_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
  TF_VAR_region: us-west-2
  TF_VAR_environment: ${{ github.ref_name == 'main' && 'production' || github.ref_name }}
  DISPLAY_BRANCH: ${{ github.ref }}
  TF_LOG: ${{ secrets.TF_LOG }}
  TF_INPUT: false
  TF_CLI_ARGS: "-no-color"

jobs:
  terraform:
    name: "CI/CD Pipeline - Terraform"
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.1

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11.12

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Cache Terraform Directory
        uses: actions/cache@v3
        with:
          path: |
            ~/.terraform.d/plugin-cache
            ~/.terraform
          key: terraform-${{ runner.os }}-${{ hashFiles('**/*.tf') }}
          restore-keys: |
            terraform-${{ runner.os }}-

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Terraform Init
        run: terraform init -input=false -backend=true -reconfigure

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -out=tfplan.binary

      - name: Convert Plan to JSON
        run: |
          mkdir -p logs
          terraform show -json tfplan.binary > logs/tfplan.json

      - name: Set Output for Plan
        id: plan_output
        run: echo "::set-output name=plan::$(cat logs/tfplan.json | jq -c .)"

      - name: Parse tfplan and Send to Slack
        run: python parser/parse_tfplan.py --input logs/tfplan.json --output logs/plan_output.json

      - name: Save Plan Output
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: logs/tfplan.json

      - name: Comment Plan on Pull Request
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          number: ${{ github.event.pull_request.number }}
          header: "### Terraform Plan"
          message: |
            ```json
            ${{ steps.plan_output.outputs.plan }}
            ```

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve tfplan

      - name: Slack Notification (Success)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && success() && (env.TF_VAR_environment == 'production' || env.TF_VAR_environment == 'prod')
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "Terraform plan applied successfully in `${{ env.TF_VAR_environment }}` environment (branch: `${{ env.DISPLAY_BRANCH }}`)."
            }
        env:
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}

      - name: Slack Notification (Failure)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && failure()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "Terraform plan failed in `${{ env.TF_VAR_environment }}` environment (branch: `${{ env.DISPLAY_BRANCH }}`)."
            }
        env:
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}

      - name: Save Terraform Workflow Logs
        if: always()
        run: |
          echo "Saving Terraform plan in JSON format..."
          terraform show -json tfplan > logs/tfplan.json
          echo "Terraform logs saved to logs/tfplan.json"
        env:
          TF_LOG: ${{ env.TF_LOG }}

      - name: Upload Full Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-workflow-logs
          path: |
            logs/tfplan.json