# Public automatoin engine where we can run terraform commands

name: Terraform CI/CD
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read
  pull-requests: write

env:
  name: ${{ github.ref_name }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  TF_VAR_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
  TF_VAR_region: us-west-2
  TF_VAR_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
  TF_VAR_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VAR_environment: ${{ github.ref_name }}
  TF_LOG: ${{ secrets.TF_LOG }}
  TF_INPUT: false
  TF_CLI_ARGS: "-no-color"

jobs:
    terraform:
        name: "CI/CD Pipeline - Terraform"
        runs-on: ubuntu-latest


        steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v3
              with:
                terraform_version: 1.6.6

            - name: Cache Terraform Directory
              uses: actions/cache@v3
              with:
                path: |
                  ~/.terraform.d/plugin-cache
                  ~/.terraform
                key: terraform-${{ runner.os }}-${{ hashFiles('**/*.tf') }}
                restore-keys: |
                  terraform-${{ runner.os }}-

            - name: Cache Terraform
              uses: actions/cache@v3
              with:
                path: |
                  ~/.terraform.d/plugin-cache
                  ~/.terraform
                key: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf') }}
                restore-keys: |
                  ${{ runner.os }}-terraform-
                    
            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v3
              with:
                terraform_version: 1.6.6

            - name: Terraform Format Check
              run: terraform fmt -check -recursive
        
            - name: Terraform Init
              run: terraform init -input=false -backend=true -reconfigure

            - name: Terraform Validate
              run: terraform validate

            - name: Terraform Plan
              run: terraform plan -out=tfplan

            - name: Plan Output
              id: plan_output
              run: |
                terraform show -json tfplan > tfplan.json
                echo "plan<<EOF" >> $GITHUB_OUTPUT
                cat tfplan.json >> $GITHUB_OUTPUT
                echo "EOF" >> $GITHUB_OUTPUT

            - name: Save Plan Output
              uses: actions/upload-artifact@v4
              with:
                name: tfplan
                path: tfplan.json

            - name: Comment Plan on Pull Request
              if: github.event_name == 'pull_request'
              uses: marocchino/sticky-pull-request-comment@v2
              with:
                number: ${{ github.event.pull_request.number }}
                header: "### Terraform Plan"
                message: |
                  ```json
                  ${{ steps.plan_output.outputs.plan }}
                  ```

            - name: Comment Plan on Push
              if: github.event_name == 'push'
              uses: marocchino/sticky-pull-request-comment@v2
              with:
                header: "### Terraform Plan"
                message: |
                  ```json
                  ${{ steps.plan_output.outputs.plan }}
                  ```

            - name: Terraform Apply
              if: github.ref == 'refs/heads/main' && github.event_name == 'push'
              run: terraform apply -auto-approve tfplan

            - name: Upload Plan Artifact
              if: github.ref == 'refs/heads/main' && github.event_name == 'push'
              uses: actions/upload-artifact@v4
              with:
                name: terraform-plan
                path: tfplan

            - name: Slack Notification (Success)
              if: github.ref == 'refs/heads/main' && github.event_name == 'push' && (env.TF_VAR_environment == 'production' || env.TF_VAR_environment == 'prod')
              uses: slackapi/slack-github-action@v1
              with:
                payload: |
                  {
                    "text": "Terraform plan applied successfully in `${{ env.TF_VAR_environment }}` environment.",
                    "attachments": [
                      {
                        "text": "Plan applied for branch `${{ github.ref }}. Check the plan artifact for more details."
                      }
                    ]
                  }

            - name: Slack Notification (Failure)
              if: github.ref == 'refs/heads/main' && github.event_name == 'push' && failure()
              uses: slackapi/slack-github-action@v1
              with:
                payload: |
                  {
                    "text": "Terraform plan failed in `${{ env.TF_VAR_environment }}` environment.",
                    "attachments": [
                      {
                        "text": "Check logs and artifacts in GitHub Actions for more info. Workflow: `${{ github.workflow }}`, Job: `${{ github.job }}`"
                      }
                    ]
                  }
              env:
                SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}

            - name: Save Terraform Workflow Logs
              if: always()
              run: |
                mkdir -p logs
                terraform show -json tfplan > logs/tfplan.json
                echo "Terraform logs saved to logs/tfplan.json"
                terraform plan -no-color -out=tfplan | tee logs/terraform_plan_stdout.log > logs/terraform_plan.log 2> logs/terraform_plan_stderr.log || true
              env:
                TF_LOG: ${{ env.TF_LOG }}

            - name: Upload Full Logs
              if: always()
              uses: actions/upload-artifact@v4
              with:
                name: terraform-workflow-logs
                path: |
                  logs/tfplan.json
                  logs/terraform_plan_stdout.log
                  logs/terraform_plan.log
                  logs/terraform_plan_stderr.log

            - name: Label PR
              if: github.event_name == 'pull_request'
              uses: actions/labeler@v4


            


# Every push to the main branch will trigger this workflow
# The workflow will run on the latest version of Ubuntu
#If formatting is not correct, it will fail the workflow